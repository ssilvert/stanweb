{
  "clients": {
    "clientAuthorization": "Client authorization",
    "implicitFlow": "Implicit flow",
    "createClient": "Create client",
    "importClient": "Import client",
    "clientID": "Client ID",
    "homeURL": "Home URL",
    "webOrigins": "Web origins",
    "addWebOrigins": "Add web origins",
    "adminURL": "Admin URL",
    "formatOption": "Format option",
    "encryptAssertions": "Encrypt assertions",
    "clientSignature": "Client signature required",
    "downloadAdaptorTitle": "Download adaptor configs",
    "credentials": "Credentials",
    "roles": "Roles",
    "createRole": "Create role",
    "noRoles": "No roles for this client",
    "noRolesInstructions": "You haven't created any roles for this client. Create a role to get started.",
    "clientScopes": "Client scopes",
    "addClientScope": "Add client scope",
    "addClientScopesTo": "Add client scopes to {{clientId}}",
    "clientScopeRemoveSuccess": "Scope mapping successfully removed",
    "clientScopeRemoveError": "Could not remove the scope mapping {{error}}",
    "clientScopeSuccess": "Scope mapping successfully updated",
    "clientScopeError": "Could not update the scope mapping {{error}}",
    "searchByName": "Search by name",
    "setup": "Setup",
    "evaluate": "Evaluate",
    "changeTypeTo": "Change type to",
    "assignRole": "Assign role",
    "clientScope": {
      "default": "Default",
      "optional": "Optional"
    },
    "clientScopeSearch": {
      "client": "Client scope",
      "assigned": "Assigned type"
    },
    "assignedType": "Assigned type",
    "hideInheritedRoles": "Hide inherited roles",
    "inherentFrom": "Inherited from",
    "emptyClientScopes": "This client doesn't have any added client scopes",
    "emptyClientScopesInstructions": "There are currently no client scopes linked to this client. You can add existing client scopes to this client to share protocol mappers and roles.",
    "emptyClientScopesPrimaryAction": "Add client scopes",
    "scopeParameter": "Scope parameter",
    "scopeParameterPlaceholder": "Select scope parameters",
    "effectiveProtocolMappers": "Effective protocol mappers",
    "effectiveRoleScopeMappings": "Effective role scope mappings",
    "generatedAccessToken": "Generated access token",
    "searchForProtocol": "Search protocol mapper",
    "parentClientScope": "Parent client scope",
    "searchForRole": "Search role",
    "origin": "Origin",
    "user": "User",
    "details": "Details",
    "noGeneratedAccessToken": "No generated access token",
    "generatedAccessTokenIsDisabled": "Generated access token is disabled when no user is selected",
    "clientList": "Clients",
    "clientsList": "Clients list",
    "initialAccessToken": "Initial access token",
    "clientSettings": "Client details",
    "selectEncryptionType": "Select Encryption type",
    "generalSettings": "General Settings",
    "capabilityConfig": "Capability config",
    "clientsExplain": "Clients are applications and services that can request authentication of a user",
    "createSuccess": "Client created successfully",
    "createError": "Could not create client: '{{error}}'",
    "clientImportError": "Could not import client: {{error}}",
    "clientSaveSuccess": "Client successfully updated",
    "clientSaveError": "Client could not be updated:",
    "clientImportSuccess": "Client imported successfully",
    "clientDelete": "Delete {{clientId}} ?",
    "clientDeletedSuccess": "The client has been deleted",
    "clientDeleteError": "Could not delete client: {{error}}",
    "clientDeleteConfirmTitle": "Delete client?",
    "disableConfirmTitle": "Disable client?",
    "downloadAdapterConfig": "Download adapter config",
    "disableConfirm": "If you disable this client, you cannot initiate a login or obtain access tokens.",
    "clientDeleteConfirm": "If you delete this client, all associated data will be removed.",
    "searchInitialAccessToken": "Search token",
    "createToken": "Create initial access token",
    "tokenDeleteConfirm": "Are you sure you want to permanently delete the initial access token {{id}}",
    "tokenDeleteConfirmTitle": "Delete initial access token?",
    "tokenDeleteSuccess": "initial access token created successfully",
    "tokenDeleteError": "Could not delete initial access token: '{{error}}'",
    "id": "ID",
    "timestamp": "Created date",
    "expires": "Expires",
    "count": "Count",
    "remainingCount": "Remaining count",
    "expiration": "Expiration",
    "noTokens": "No initial access tokens",
    "noTokensInstructions": "You haven't created any initial access tokens. Create an initial access token by clicking \"Create\".",
    "tokenSaveSuccess": "New initial access token has been created",
    "tokenSaveError": "Could not create initial access token {{error}}",
    "initialAccessTokenDetails": "Initial access token details",
    "copyInitialAccessToken": "Please copy and paste the initial access token before closing as it can not be retrieved later.",
    "clientAuthentication": "Client authentication",
    "authentication": "Authentication",
    "authenticationFlow": "Authentication flow",
    "standardFlow": "Standard flow",
    "directAccess": "Direct access",
    "serviceAccount": "Service account roles",
    "enableServiceAccount": "Enable service account roles",
    "displayOnClient": "Display client on screen",
    "consentScreenText": "Client consent screen text",
    "loginSettings": "Login settings",
    "accessSettings": "Access settings",
    "rootUrl": "Root URL",
    "validRedirectUri": "Valid redirect URIs",
    "addRedirectUri": "Add valid redirect URIs",
    "loginTheme": "Login theme",
    "consentRequired": "Consent required",
    "clientAuthenticator": "Client Authenticator",
    "changeAuthenticatorConfirmTitle": "Change to {{clientAuthenticatorType}}",
    "changeAuthenticatorConfirm": "If you change authenticator to {{clientAuthenticatorType}}, the keycloak database will be updated and you may need to download a new adapter configuration for this client",
    "signedJWTConfirm": "You should configure JWKS URL or keys in the \"Keys\" tab to change the parameters of Signed JWT authenticator.",
    "clientSecret": "Client secret",
    "regenerate": "Regenerate",
    "confirmClientSecretTitle": "Regenerate secret for this client?",
    "confirmClientSecretBody": "If you regenerate secret, the Keycloak database will be updated and you will need to download a new adapter for this client.",
    "confirmAccessTokenTitle": "Regenerate registration access token?",
    "confirmAccessTokenBody": "If you regenerate registration access token, the access data regarding the client registration service will be updated.",
    "clientSecretSuccess": "Client secret regenerated",
    "clientSecretError": "Could not regenerate client secret due to: {{error}}",
    "registrationAccessToken": "Registration access token",
    "accessTokenSuccess": "Access token regenerated",
    "accessTokenError": "Could not regenerate access token due to: {{error}}",
    "signatureAlgorithm": "Signature algorithm",
    "subject": "Subject DN",
    "searchForClient": "Search for client",
    "advanced": "Advanced",
    "revocation": "Revocation",
    "clustering": "Clustering",
    "notBefore": "Not before",
    "setToNow": "Set to now",
    "noAdminUrlSet": "No push sent. No admin URI configured or no registered cluster nodes available",
    "notBeforeSetToNow": "Not Before set for client",
    "notBeforeNowClear": "Not Before cleared for client",
    "notBeforePushFail": "Failed to push \"not before\" to: {{failedNodes}}",
    "notBeforePushSuccess": "Successfully push \"not before\" to: {{successNodes}}",
    "testClusterFail": "Failed verified availability for: {{failedNodes}}. Fix or unregister failed cluster nodes and try again",
    "testClusterSuccess": "Successfully verified availability for: {{successNodes}}",
    "deleteNode": "Delete node?",
    "deleteNodeBody": "Are you sure you want to permanently delete the node \"{{node}}\"",
    "deleteNodeSuccess": "Node successfully removed",
    "deleteNodeFail": "Could not delete node: '{{error}}'",
    "addedNodeSuccess": "Node successfully added",
    "addedNodeFail": "Could not add node: '{{error}}'",
    "addNode": "Add node",
    "push": "Push",
    "clear": "Clear",
    "none": "None",
    "any": "Any",
    "nodeReRegistrationTimeout": "Node Re-registration timeout",
    "registeredClusterNodes": "Registered cluster nodes",
    "nodeHost": "Node host",
    "lastRegistration": "Last registration",
    "testClusterAvailability": "Test cluster availability",
    "registerNodeManually": "Register node manually",
    "fineGrainOpenIdConnectConfiguration": "Fine grain OpenID connect configuration",
    "fineGrainSamlEndpointConfig": "Fine Grain SAML Endpoint Configuration",
    "accessTokenSignatureAlgorithm": "Access token signature algorithm",
    "idTokenSignatureAlgorithm": "ID token signature algorithm",
    "idTokenEncryptionKeyManagementAlgorithm": "ID token encryption key management algorithm",
    "idTokenEncryptionContentEncryptionAlgorithm": "ID token encryption content encryption algorithm",
    "userInfoSignedResponseAlgorithm": "User info signed response algorithm",
    "requestObjectSignatureAlgorithm": "Request object signature algorithm",
    "requestObjectRequired": "Request object required",
    "requestObject": {
      "not required": "Not required",
      "request or request_uri": "Request or Request URI",
      "request only": "Request only",
      "request_uri only": "Request URI only"
    },
    "openIdConnectCompatibilityModes": "Open ID Connect Compatibly Modes",
    "excludeSessionStateFromAuthenticationResponse": "Exclude Session State From Authentication Response",
    "assertionConsumerServicePostBindingURL": "Assertion Consumer Service POST Binding URL",
    "assertionConsumerServiceRedirectBindingURL" :"Assertion Consumer Service Redirect Binding URL",
    "logoutServicePostBindingURL": "Logout Service POST Binding URL",
    "logoutServiceRedirectBindingURL": "Logout Service Redirect Binding URL",
    "advancedSettings": "Advanced Settings",
    "assertionLifespan": "Assertion Lifespan",
    "accessTokenLifespan": "Access Token Lifespan",
    "oAuthMutual": "OAuth 2.0 Mutual TLS Certificate Bound Access Tokens Enabled",
    "keyForCodeExchange": "Proof Key for Code Exchange Code Challenge Method",
    "authenticationOverrides": "Authentication flow overrides",
    "browserFlow": "Browser Flow",
    "directGrant": "Direct Grant Flow"

  }
}
